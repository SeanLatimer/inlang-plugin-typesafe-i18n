var g=async e=>({baseLocale:"en",tempPath:"./node_modules/typesafe-i18n/temp-output/",outputPath:"./src/i18n/",outputFormat:"TypeScript",typesFileName:"i18n-types",utilFileName:"i18n-util",formattersTemplateFileName:"formatters",typesTemplateFileName:"custom-types",esmImports:!1,adapter:void 0,generateOnlyTypes:!1,banner:"/* eslint-disable */",runAfterGenerator:void 0,...e}),p=async e=>{let t=await e.readFile(".typesafe-i18n.json").catch(()=>"{}");return JSON.parse(t.toString())},u=async e=>{let t=await p(e);return g(t)};var l=(...e)=>e.map(t=>{for(;t.startsWith("/");)t=t.substring(1);for(;t.endsWith("/");)t=t.substring(0,t.length-1);return t}).join("/");async function v({config:e,$fs:t,$import:s}){let n=await u(t),a=[];for(let r of e.languages){let i=await m(t,s,n.outputPath,r);a.push(f(i,r))}return a}var m=async(e,t,s,n)=>{let i=(await e.readFile(l(s,`${n}/index.ts`),"utf-8")).toString().split(`
`).filter(c=>!c.trim().startsWith("import ")).join(`
`).replace(/:.*=/g," =");await e.writeFile(`${n}.temp.js`,i);let o=(await t(`${n}.temp.js`)).default;return await e.rm(`${n}.temp.js`),o},f=(e,t)=>({type:"Resource",languageTag:{type:"LanguageTag",name:t},body:Object.entries(e).map(([s,n])=>y(s,n))}),y=(e,t)=>({type:"Message",id:{type:"Identifier",name:e},pattern:{type:"Pattern",elements:[{type:"Text",value:t}]}});async function h({$fs:e,config:t,resources:s}){let n=await u(e);for(let a of s){let r=a.languageTag.name,i=d(a),o=r===t.referenceLanguage?"BaseTranslation":"Translation",c=`import type { ${o} } from './${l(n.outputPath,n.typesFileName)}'

const ${r}: ${o} = ${i}

export default ${r}`;await e.writeFile(`${r}.ts`,c)}}var d=e=>{let t=Object.fromEntries(e.body.map(w));return JSON.stringify(t,null,3)};function w(e){return[e.id.name,e.pattern.elements[0].value]}export{v as readResources,h as writeResources};
